SHELL := /bin/bash

sources = $(shell find -type f -name '*_test.go' -prune \
		  -o -type f -name '*.go' -printf '%P '         \
		  -o -type f -name '*.gotpl' -printf '%P ')
gopath := $(shell echo $$GOPATH)

#===============================================================================
#  release information
#===============================================================================
tool_dir := _tools
release_dir := _release
pkg_dest_dir := $(release_dir)/.pkg

latest_local_devel_branch := $(subst * ,,$(shell git branch --sort='-committerdate' \
	| grep --invert-match master                                                    \
	| head --lines=1))
new_tag := $(shell echo "$(latest_local_devel_branch)"  \
	| grep --only-matching -E '[0-9]+\.[0-9]+\.[0-9]+')

#===============================================================================
#  build options
#===============================================================================
ALL_OS := darwin linux windows
ALL_ARCH := 386 amd64

# Version tag must be annotation tag created by `git tag -a 'x.y.z'`.
version := $(shell git describe --always --dirty 2>/dev/null || echo 'no git tag')
VERSION_PACKAGE := main
build_revision := $(shell git rev-parse --short HEAD)
build_with := $(shell go version)

# `CGO_ENABLED=0 GOOS=linux go build -a -ldflags '-extldflags "-static"' .` というのもあるが？
static_flags := -a -tags netgo -installsuffix netgo
ld_flags := -s -w -X '$(VERSION_PACKAGE).buildVersion=$(version)' \
	-X '$(VERSION_PACKAGE).buildRevision=$(build_revision)'       \
	-X '$(VERSION_PACKAGE).buildWith=$(build_with)'               \
	-extldflags -static

# go modules (go 1.11)
enable_go_modules_env := GO111MODULE=on

#===============================================================================
#  lint tool
#===============================================================================
GOLINTER := golangci-lint

#===============================================================================
#  gitignore.io
#===============================================================================
GITIGNORE_BOILERPLATE :=  Vim,Go
gitignore_io_request := https://www.gitignore.io/api/$(GITIGNORE_BOILERPLATE)

#===============================================================================
#  file generation from template engine
#    `mktpl` is used for generating files and .data.yml is used for templating.
#    .data.yml is automatically generated using upper case variables in Makefile.
#===============================================================================
BINARY := $(notdir $(shell go list))
template_dir := $(tool_dir)/etc/template
data_yml := .data.yml

HELP_OUT := $(BINARY) help

#===============================================================================
#  targets
#    `make [help]` shows tasks what you should execute.
#===============================================================================
.DEFAULT_GOAL := help

.PHONY: help ## show help
help:
	@echo 'USAGE: make [target]'
	@echo
	@echo 'TARGETS:'
	@grep -E '^.PHONY[^#]+##' $(MAKEFILE_LIST) \
		| sed -e 's/^.PHONY: //'               \
		| column -t -s '##'

.PHONY: setup ## install devlop tools for this project
setup: $(data_yml)
	go get -v -u github.com/yuta-masano/mktpl
	go get -v -u github.com/golangci/golangci-lint/cmd/golangci-lint
	go get -v -u github.com/tcnksm/ghr

.PHONY: init ## misc tasks for initial commit
init: setup .gitignore
	mkdir -p .github
	mktpl -d $(data_yml) -t $(template_dir)/ISSUE_TEMPLATE.md >.github/ISSUE_TEMPLATE.md
	echo -n >CHANGELOG
	git add $(tool_dir) .gitignore .github .golangci.yml CHANGELOG LICENSE Makefile
	git commit -m 'Initial commit'
	cp -a $(tool_dir)/etc/git_hooks/* .git/hooks/

# You need to do this task when you have updated or installed packages, because godoc
# reads files generated by `go install`.
.PHONY: install ## it is necessary to notify godoc when packages have been updated or installed newly
install:
	$(MAKE) $(gopath)/bin/$(BINARY)

.PHONY: lint ## lint go sources and check whether only LICENSE file has copyright sentence
lint: install
	$(GOLINTER) run
	$(tool_dir)/copyright_check.sh

.PHONY: test ## go test
test:
	@$(foreach f, $(shell go list ./... | grep --invert-match /vendor/), $(enable_go_modules_env) go test -v -cover $f;)

.PHONY: push-release-tag ## update CHANGELOG and push all of the your development works
push-release-tag: lint test
	$(tool_dir)/add_changelog.sh "$(new_tag)"
	git checkout master
	git merge --ff "$(latest_local_devel_branch)"
	git push
	$(tool_dir)/add_release_tag.sh "$(new_tag)"
	git branch --move "$(latest_local_devel_branch)" "$(latest_local_devel_branch)-pushed"

.PHONY: all-build
all-build: lint test
	$(tool_dir)/build_static_bins.sh "$(ALL_OS)" "$(ALL_ARCH)"        \
		"$(static_flags)" "$(ld_flags)" "$(pkg_dest_dir)" "$(BINARY)"

.PHONY: all-archive
all-archive:
	$(enable_go_modules_env) $(tool_dir)/archive.sh "$(ALL_OS)" "$(ALL_ARCH)" "$(pkg_dest_dir)"

.PHONY: release ## build binaries for all platforms and upload them to GitHub
release: all-build all-archive
	ghr "$(version)" "$(release_dir)"

.PHONY: clean ## uninstall the binary and remove non versioning files and direcotries
clean:
	$(enable_go_modules_env) go mod tidy
	$(enable_go_modules_env) go clean -i .
	rm -rf $(release_dir)
	rm -f $(data_yml)

.PHONY: doc ## create README.md and Development.md using template
doc: $(data_yml) $(template_dir)/README.md
	@mktpl -d $(data_yml) -t $(template_dir)/README.md >README.md
	@mktpl -d $(data_yml) -t $(template_dir)/Development.md >Development.md

#---  helper targets  ----------------------------------------------------------

.INTERMEDIATE: $(data_yml)
$(data_yml):
	@$(MAKE) print_mktpl_vars | grep '^[A-Z_]' >$@
	@sed -i -e '/^make\[[0-9]\+\]:.*/d' -e 's/ *$$//' $@

.gitignore:
	curl -L $(gitignore_io_request) >>$@
	echo >>$@
	echo '### my repository' >>$@
	echo '_release' >>$@

$(gopath)/bin/$(BINARY): $(sources)
	$(enable_go_modules_env) CGO_ENABLED=0 go install $(subst -a ,,$(static_flags)) -ldflags "$(ld_flags)"

# Dumping Every Makefile Variable
.PHONY: print_mktpl_vars
print_mktpl_vars:
	$(foreach V,                                         \
		$(sort $(.VARIABLES)),                           \
		$(if                                             \
			$(filter-out environment% default automatic, \
				$(origin $V)),                           \
			$(info $V: $($V))                            \
		)                                                \
	)
